%% This configuration is intened to benchmark antidote with protocol buffer interface.
%% The important parameters are as follows:

%% {concurrent, number} number of concurrent threads
%% this has to be carefulle chosen. Too few threads will
%% not exploit the real throughput of the system, while too high concurrency will over-stress
%% the system and trigger timeouts. The suggested number is about 20.
{concurrent, 10}.
%% {mode, max|{rate, integer()}}: how often a thread should send request. Use 'max' for benchmarking.
%% If you are debugging, maybe {rate, N} can be useful, which means each thread sends N reqs per second.
{mode, max}.

%% Duration, in minutes, of the test.
{duration, 1}.
%% the benchmark driver, the source file that contains the operations to be issued.
{driver, basho_bench_driver_antidote_pb}.

%{key_generator, {dc_bias, 1, 1, 1, 1000}}.
{key_generator, {pareto_int, 1000000}}.

%%{value_generator, {uniform_int, 100}}.
{value_generator, {fixed_bin, 10}}.

%% {operations, [{Op(), integer()}|...]}: the operation to benchmark and its proportion.
%% Current operations: read, append, txn, update_only_txn, read_only_txn.
%% antidote nodes. The assumption is that each node is assumed to have only one partition and the hash
%% fun should be integer()%N).
{operations, [{update_only_txn, 1}]}.
%%{operations, [{read_only_txn, 1}]}.
%%{operations, [{append, 1}, {read, 1}]}.
%%{operations, [{update_only_txn, 1}, {read_only_txn, 1}, {txn, 1}]}.
%%{operations, [{update_only_txn, 1}, {read_only_txn, 1}, {append, 1}, {read, 1}, {txn, 1} ]}.


%% the following port is used by rel
{antidote_pb_port, [8087]}.

{antidote_cookie, antidote}.


%%{antidote_types, [{antidote_crdt_orset, [add, remove]}]}.
%%{antidote_types, [{antidote_crdt_set_rw, [add, remove]}]}.
{antidote_types, [{antidote_crdt_counter, [{increment,1}, {decrement,1}]}]}.
%%{antidote_types, [{antidote_crdt_mvreg, [assign]}]}.
%%{antidote_types, [{antidote_crdt_lwwreg, [assign]}]}.
%% Use the following parameter to set the size of the orset
{set_size, 10}.

%%{antidote_types, [{riak_dt_pncounter, [increment, decrement]}, {riak_dt_orset, [add, remove]}]}.
{antidote_pb_ips, ['127.0.0.1']}.

%% To measure staleness set put {staleness, true}
%% And set in measurements {staleness1,_} .. {stalenessN,_}, N is the number of DCs
%% There is no sanity check in the code, so make sure that the number is consistent
%% Assumption: All benchmark client running in same node connects to same DC
%% Then staleness1.csv contains localCurTime-vectorclock[DC1]
%% staleness2.csv contains localCurTime-vectorclock[DC2] etc..
{staleness, false}.
%%{measurements, [{staleness1,10}, {staleness2,10}, {staleness3,10}]}.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%  for transacitons %%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The following parameters are used when issuing transactions.
%% When running append and read operations, they are ignored.

%% Number of reads
%% update_only_txn ignores it.
{num_reads, 10}.
%% Number of updates
%% read_only_txn ignores it.
{num_updates, 10}.

%% If sequential_reads is set to true,
%% the client will send each read (of a total
%% num_reads) in a different antidote:read_objects call.
%% when set to false, all (num_reads) reads will be sent
%% in a single read_objects call, which is faster, as
%% antidote will process them in parallel.
{sequential_reads, false}.

%% Idem for updates.
{sequential_writes, false}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%% end for transacitons %%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% For more information, please check : http://docs.basho.com/riak/latest/ops/building/benchmarking/
